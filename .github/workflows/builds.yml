name: Builds
on:
  push:

permissions:
  contents: read

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-incus:
    name: Build Incus
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-22.04
          - debian-11
          - debian-12
        arch:
          - amd64
          - arm64
        exclude:
          - os: debian-11
            arch: arm64
    runs-on:
      - self-hosted
      - cpu-4
      - mem-4G
      - disk-50G
      - arch-${{ matrix.arch }}
      - image-${{ matrix.os }}

    env:
      OS_ARCH: ${{ matrix.arch }}
      HOME: "/root/"
      PKG_CONFIG_PATH: "/opt/incus/lib/pkgconfig/"
      CGO_LDFLAGS: "-L/opt/incus/lib/"
      CGO_CFLAGS: "-I/opt/incus/include/"
      LD_LIBRARY_PATH: "/opt/incus/lib/"
      CPATH: "/opt/incus/include/"
      PATH: "/opt/incus/bin:/root/.cargo/bin:/usr/local/go/bin:/usr/local/node/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
      LXC_TAG: "lxc-5.0.3"
      LXCFS_TAG: "lxcfs-5.0.4"
      INCUS_TAG: "v0.6.0"
      INCUS_UI_CANONICAL_TAG: "0.6"
      RAFT_TAG: "v0.22.0"
      COWSQL_TAG: "v1.15.4"
      CRIU_TAG: "v3.19"
      EDK2_TAG: "edk2-stable202311"
      GOLANG_TAG: "go1.21.7"
      LIBTPMS_TAG: "v0.9.6"
      LIBURING_TAG: "liburing-2.5"
      MINIO_TAG: "RELEASE.2024-02-17T01-15-57Z"
      NASM_TAG: "nasm-2.16.01"
      NVIDIA_CONTAINER_TAG: "v1.14.5"
      QEMU_TAG: "v8.2.1"
      SEABIOS_TAG: "rel-1.16.3"
      SWTPM_TAG: "v0.8.1"
      VIRTIOFSD_TAG: "v1.10.1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure git
        run: |
          git config --global --add advice.detachedHead false
          git config --global user.email "noreply@zabbly.com"
          git config --global user.name "Zabbly Incus build"

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install --no-install-recommends --yes \
            acpica-tools \
            asciidoc \
            autoconf \
            automake \
            bison \
            bmake \
            build-essential \
            curl \
            debhelper \
            devscripts \
            dosfstools \
            expect \
            flex \
            gawk \
            gettext \
            git \
            iproute2 \
            libacl1-dev \
            libaio-dev \
            libapparmor-dev \
            libcap-dev \
            libcap-ng-dev \
            libdbus-1-dev \
            libelf-dev \
            libfuse3-dev \
            libglib2.0-dev \
            libgnutls28-dev \
            libjson-glib-dev \
            libnet1-dev \
            libnl-3-dev \
            libnuma-dev \
            libpam0g-dev \
            libpixman-1-dev \
            libprotobuf-c-dev \
            libprotobuf-dev \
            librbd-dev \
            libseccomp-dev \
            libselinux1-dev \
            libspice-server-dev \
            libsqlite3-dev \
            libssl-dev \
            libtool \
            libudev-dev \
            libusb-1.0-0-dev \
            libusbredirhost-dev \
            libuv1-dev \
            lsb-release \
            mtools \
            ninja-build \
            pkg-config \
            protobuf-c-compiler \
            protobuf-compiler \
            python3-cryptography \
            python3-jinja2 \
            python3-pexpect \
            python3-pip \
            python3-setuptools \
            python3-venv \
            rsync \
            socat \
            uuid-dev \
            xmlto \
            xorriso

          pip3 install meson || pip3 install meson --break-system-packages

      - name: Install backporter debhelper (on focal)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          echo "deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse" >> /etc/apt/sources.list
          apt-get install -t focal-backports debhelper --yes

      - name: Install Go
        run: |
          curl -sL "https://go.dev/dl/${GOLANG_TAG}.linux-${OS_ARCH}.tar.gz" | tar -C /usr/local/ -zx
          go version

      - name: Install Rust
        run: |
          curl -sL https://sh.rustup.rs -o install-rust.sh
          bash install-rust.sh -y

      - name: Install Node
        run: |
          [ "${OS_ARCH}" = "amd64" ] && NODE_ARCH=x64
          [ "${OS_ARCH}" = "arm64" ] && NODE_ARCH=arm64


          mkdir /usr/local/node/
          curl -sL "https://nodejs.org/dist/v20.10.0/node-v20.10.0-linux-${NODE_ARCH}.tar.xz" | tar -C /usr/local/node/ -Jx --strip-components=1

      - name: Build environment
        run: |
          mkdir /build/
          mkdir -p \
            /opt/incus/bin/ \
            /opt/incus/include/ \
            /opt/incus/lib/ \
            /opt/incus/lib/systemd/system/ \
            /opt/incus/share/

      - name: Get the code
        run: |
          git clone https://github.com/axboe/liburing /build/liburing --depth 1 -b "${LIBURING_TAG}"
          git clone https://github.com/cowsql/raft /build/raft --depth 1 -b "${RAFT_TAG}"
          git clone https://github.com/cowsql/cowsql /build/cowsql --depth 1 -b "${COWSQL_TAG}"
          git clone https://github.com/lxc/lxc /build/lxc --depth 1 -b "${LXC_TAG}"
          git clone https://github.com/lxc/lxcfs /build/lxcfs -b "${LXCFS_TAG}"
          git clone https://github.com/lxc/incus /build/incus -b "${INCUS_TAG}"

          git clone https://github.com/checkpoint-restore/criu /build/criu --depth 1 -b "${CRIU_TAG}"
          git clone https://github.com/NVIDIA/libnvidia-container /build/libnvidia-container --depth 1 -b "${NVIDIA_CONTAINER_TAG}"
          git clone https://github.com/minio/minio /build/minio --depth 1 -b "${MINIO_TAG}"

          git clone https://gitlab.com/qemu-project/seabios /build/seabios --depth 1 -b "${SEABIOS_TAG}"
          git clone https://github.com/netwide-assembler/nasm /build/nasm --depth 1 -b "${NASM_TAG}"
          git clone https://github.com/tianocore/edk2 /build/edk2 --recurse-submodules --shallow-submodules --depth 1 -b "${EDK2_TAG}"
          git clone https://github.com/stefanberger/libtpms /build/libtpms --depth 1 -b "${LIBTPMS_TAG}"
          git clone https://github.com/stefanberger/swtpm /build/swtpm --depth 1 -b "${SWTPM_TAG}"
          git clone https://gitlab.com/virtio-fs/virtiofsd /build/virtiofsd --depth 1 -b "${VIRTIOFSD_TAG}"
          git clone https://gitlab.com/qemu-project/qemu /build/qemu --depth 1 -b "${QEMU_TAG}"

          git clone https://github.com/canonical/lxd-ui /build/incus-ui-canonical --depth 1 -b "${INCUS_UI_CANONICAL_TAG}"

      - name: Build liburing
        run: |
          cd /build/liburing
          ./configure --prefix=/opt/incus
          make

          mkdir -p /build/target/liburing/
          DESTDIR=/build/target/liburing make install
          rsync -a /build/target/liburing/opt/incus/include/* /opt/incus/include/
          rsync -a /build/target/liburing/opt/incus/lib/* /opt/incus/lib/

      - name: Build raft
        run: |
          cd /build/raft
          autoreconf -i
          ./configure --prefix=/opt/incus
          make

          mkdir -p /build/target/raft/
          DESTDIR=/build/target/raft/ make install
          rsync -a /build/target/raft/opt/incus/include/ /opt/incus/include/
          rsync -a /build/target/raft/opt/incus/lib/ /opt/incus/lib/

      - name: Build cowsql
        run: |
          cd /build/cowsql
          autoreconf -i
          ./configure --prefix=/opt/incus
          make

          mkdir -p /build/target/cowsql/
          DESTDIR=/build/target/cowsql/ make install
          rsync -a /build/target/cowsql/opt/incus/include/ /opt/incus/include/
          rsync -a /build/target/cowsql/opt/incus/lib/ /opt/incus/lib/

      - name: Build LXC
        run: |
          cd /build/lxc
          meson setup build \
                  --prefix=/opt/incus \
                  --libdir=/opt/incus/lib \
                  -Dexamples=false \
                  -Dman=false \
                  -Dtools=false \
                  -Dtests=false \
                  -Dmemfd-rexec=false \
                  -Dapparmor=true \
                  -Dseccomp=true \
                  -Dselinux=true \
                  -Dcapabilities=true \
                  -Dio-uring-event-loop=false
          meson compile -C build

          mkdir -p /build/target/lxc/
          DESTDIR=/build/target/lxc/ meson install -C build
          rsync -a /build/target/lxc/opt/incus/include/ /opt/incus/include/
          rsync -a /build/target/lxc/opt/incus/lib/ /opt/incus/lib/
          mkdir -p /opt/incus/share/lxc/config/common.conf.d/
          mkdir -p /opt/incus/share/lxc/hooks/
          cp /build/target/lxc/opt/incus/share/lxc/hooks/nvidia /opt/incus/share/lxc/hooks/

      - name: Build LXCFS
        run: |
          REPO="${PWD}"

          cd /build/lxcfs

          git cherry-pick df44c8fed37c7a1aee652f02ce3e1670e6ad7485  # proc_loadavg: fix ABBA deadlock between read/refresh
          git cherry-pick fcb2484a30b04afa0e634b746618920c3e3840c0  # proc: Fix /proc/cpuinfo not respecting personality
          git cherry-pick d5ae1d6169488114c4420bd4c3396a3bdc3e4548  # proc_loadavg.c: Fix incompatible integer to pointer conversion
          git cherry-pick e47f37dfe768bd6d34f8d14f429fce0436759ba6  # cgroups: cleanup and remove unused cgroup2_devices code
          git cherry-pick a42c36e26f29cb6e544f3985af0626d815bf7142  # cpuview: pass a correct argument to lxcfs_debug
          git cherry-pick 46ea130e96d0245f01845975280ab56b59be6d05  # lxcfs: Add startup message
          git cherry-pick d5ddf34a069f983d7446985bd7472dd98d6a770b  # proc: fix MemAvailable in /proc/meminfo to exclude tmpfs files
          git cherry-pick 4aefe5151bec6b705132b72b67600fc0c3c14d95  # systemd: mkdir -p the target mount dir
          git cherry-pick fd702e4718bb2a1aeafe9643700101ea46265d7e  # typofix: fix incorrect printing in lxcfs help interface
          git cherry-pick e58ca0ec9108da9ab20107660253ae6af4ffc109  # Add macro pivot&bpf for loongarch64
          git cherry-pick 5762ba8fdf6cf28f98e00aa2a1b37eba192dba64  # lxc.mount.hook: Skip cpu sysfs logic if missing target
          git cherry-pick 25a3cb05deb25c91cd9bea2f7292e0b89087898a  # sysfs: forbid write()
          git cherry-pick b27f3ec6bac3dd4cd4c5b76e71e9236fddcaae66  # github: workaround CI issue with ASAN

          meson setup build \
                  --prefix=/opt/incus \
                  --libdir=/opt/incus/lib \
                  -Ddocs=false \
                  -Dtests=false
          meson compile -C build

          mkdir -p /build/target/lxcfs/
          DESTDIR=/build/target/lxcfs/ meson install -C build
          rsync -a /build/target/lxcfs/opt/incus/bin/ /opt/incus/bin/
          rsync -a /build/target/lxcfs/opt/incus/share/ /opt/incus/share/
          rsync -a /build/target/lxcfs/opt/incus/lib/ /opt/incus/lib/

          sed -i "s#/var/lib/lxcfs#/var/lib/incus-lxcfs#g" /opt/incus/share/lxcfs/lxc.mount.hook
          patch -p1 /opt/incus/share/lxcfs/lxc.mount.hook < "${REPO}/patches/lxcfs-0001-hook.patch"

      - name: Build Incus
        run: |
          REPO="${PWD}"

          cd /build/incus

          git cherry-pick bbc4b946355775606da35557e5404ca83a586c67  # incus/image: Fix column handling with --all-projects
          git cherry-pick 16095c9721156d8719eb51a9e5e66e12e1a9944c  # Replace util.ValueInSlice with slices.Contains
          git cherry-pick e08d8385c9a223267a8943a5ca2ffaf33363f91c  # shared/util: Delete ValueInSlice function
          git cherry-pick 5a2fb02dad734ba60e0a93b8d68d652765a048f2  # incusd/instance/qemu: Relocate image requirement checks
          git cherry-pick f2cbbe14f0e6375bfcc9543bb66b4f29f2fa3275  # doc/images: Add requirements.cdrom_agent
          git cherry-pick 847ae8fdbd6fb6043e6ec2b332522a8a668f3228  # incusd/instance/qemu: Add support for requirements.cdrom_agent
          git cherry-pick 32a4beecbf8098fdbb15ef5f36088956922630f7  # incusd/device/disk: Fix incorrect block volume usage
          git cherry-pick ab4ddb6e99847d61114bd3f448e68cbc55e5f677  # incusd/network/ovn: Use ParseIPToNet instead of manual IPToNet and net.ParseIP
          git cherry-pick 40d493d18d6500601e05c05f969b78a00be1c322  # incusd/network/ovn: Use listenAddressNet in family check
          git cherry-pick 54c80d2e8562004fcf5b39d51b4207993a65b1bf  # incusd/instance/drivers: Disable architecture check on incus cp with snapshots
          git cherry-pick b4f45ae6e95c7882680f49210a824c31e69b7285  # incusd/network/bridge: Set local address on all VXLAN tunnels
          git cherry-pick e39888708011f980edce8fb4bda7f13caac3ef7d  # incus/instance/qemu: Fix RecordOutput
          git cherry-pick 6f122017601037dae2f39448bbbb09453f6f5076  # incusd/network/ovn: Introduce get helper
          git cherry-pick 8aedf539eca9d474536ed54e9c5a6244fb671d47  # incusd/network/ovn: Add some missing indices
          git cherry-pick 76bd7520248023da743dd92703f2696c8dc3f5ad  # incusd/network/ovn: Use get helper
          git cherry-pick 179e13e44277de62bf2a92faf88d5996825fd31c  # incusd/network/ovn: Fix LogicalSwitchPortIPs logic
          git cherry-pick 90ec61f1a7659b2741df7ebaa605b595d1c18602  # incusd/network/bridge: Fix gofmt
          git cherry-pick 26dc92a150bbbbd98d5f5a2154b30bad09908aea  # incusd/network/ovn: Fix gofmt
          git cherry-pick 40ef9440817fd65cba88553e1bc87c8660ffbbce  # cmd/incus: Use proper timestamp check
          git cherry-pick 469778422f6d87a461d0865a200b631a0bd3e207  # cmd/incus: Use consistent date format and timezone
          git cherry-pick 455868c310538ae65e51adf0a69ba8378e7598d9  # client: Rename network_peer for consistency
          git cherry-pick 17cb9635aacc651d0ca8be80a0c23dcf691a7d83  # cmd/incusd: Rename network_peer to network_peers
          git cherry-pick 358907fe175a19d11a90e0dbb8d24c56468cf9af  # shared/api: Rename network_allocation for consistency
          git cherry-pick 42747d53322d8235a504cb98bcdda23d78ac9ae4  # incusd/db: Fix comment typoes
          git cherry-pick 2d5115ec5b57034481c07898562243e585599f61  # incusd/db/generate: Fix bad camel case handling
          git cherry-pick 070f4cb41f6959de509f6414692ac23298c83433  # incusd/db/network_peers: Fix duplicate type definitions
          git cherry-pick 8621f59a9be017d696476b8f7be194dbb69d4f76  # incusd/auth: Drop Permission type
          git cherry-pick 081f7803f30032079101d95c1c6265447d3ba28f  # incusd/auth: Add boilerplate doc strings
          git cherry-pick b1d29e8c43d75c0c516eddb0cc5816a9932f3c49  # incusd/images: Properly handle null creation and expiry dates
          git cherry-pick 9c285374cb1f84488d3da0bb5e4535021db96819  # incusd/images: Fix reporting of images in multiple projects
          git cherry-pick d3820c857bfaa7f7070657aeb94a3051f6d58421  # incusd/device/gpu_sriov: Add locking
          git cherry-pick 769c003d8256d6080a5616c9e6cd44b37a7e97fa  # incusd/device/gpu_sriov: Re-locate vfio-pci loading
          git cherry-pick b4e97da9f32e0960dc5aad095502665af12e8b77  # incusd/device/gpu_sriov: Rework VF allocation logic
          git cherry-pick e0de0664549cb6031088a88efde97261ef368d73  # incusd/certificates: Improve token handling when clustered
          git cherry-pick 8df72db5aee7bc6c322051db1fba211c79b75fd0  # cmd/incusd/api_1.0: Update context
          git cherry-pick fe7742d0ce26e72d2f965d9cbb9054d3a8c84ad6  # cmd/incusd/api_cluster: Update context
          git cherry-pick 000ab543a5ef5799fd4d316624709e15ac384bc9  # cmd/incusd/api_internal: Update context
          git cherry-pick d2acfcd31428d1c3fa06734d983ce373980e51f7  # cmd/incusd/daemon: Update context
          git cherry-pick aea11ec150a54b96ceefe5d70184e4f10b723e3e  # cmd/incusd/api_project: Update context
          git cherry-pick a5201eed43b6996d456e2b65c2acab6208516305  # cmd/incusd/certificates: Update context
          git cherry-pick 0fdb06def4487ddb5ec4950415566141fca7d211  # cmd/incusd/images: Update context
          git cherry-pick 83d712b82debde594a6d315d6d531d3bcc6f9081  # cmd/incusd/instance: Update context
          git cherry-pick 9d0d06cdd535fdb1cc02c65e5b6ca6f6fa25f97e  # cmd/incusd/network: Update context
          git cherry-pick e6a75ae11f7a08f6113189052e2f342f6db8cd9c  # cmd/incusd/operations: Update context
          git cherry-pick fd5fde7cb8ae9ee3e12e109c1e5588c6dddcc035  # cmd/incusd/profiles: Update context
          git cherry-pick 01da4f413baa5c9b567e47a325cc9b7d2cc6ed94  # cmd/incusd/storage: Update context
          git cherry-pick 3be19c71862b82ed319fe28a2845c98035eb07ef  # cmd/incusd/warnings: Update context
          git cherry-pick e458381475cc7afa943198b8ea8cfaf8d90be07a  # incusd/devices: Skip isolated threads from NUMA CPUs
          git cherry-pick 5d3664f8dcad1f44f19e4e5c3bf7ca71b603a9ee  # incusd/devices: Restrict CPU threads by NUMA node
          git cherry-pick 55981092efd001ab2dfda24f6936e58d3dae2ef3  # incusd: Fix import shadowing
          git cherry-pick 22313c6c6a3ca93416b32ae76017c2d760551792  # incusd/images: Fix potential race condition
          git cherry-pick 7449c1915c20daa7d745e1a729fbaa1ee69a4559  # incusd/apparmor/qemu: Silence apparmor failures

          go build -o "/opt/incus/bin/incus" github.com/lxc/incus/cmd/incus
          go build -o "/opt/incus/bin/incus-benchmark" -tags=libsqlite3 github.com/lxc/incus/cmd/incus-benchmark
          go build -o "/opt/incus/bin/incus-user" -tags=libsqlite3 github.com/lxc/incus/cmd/incus-user
          go build -o "/opt/incus/bin/incusd" -tags=libsqlite3 github.com/lxc/incus/cmd/incusd
          go build -o "/opt/incus/bin/lxd-to-incus" -tags=libsqlite3 github.com/lxc/incus/cmd/lxd-to-incus
          go build -o "/opt/incus/bin/lxc-to-incus" github.com/lxc/incus/cmd/lxc-to-incus

          mkdir -p /opt/incus/agent
          if [ "$(uname -m)" = "x86_64" ]; then
              GOARCH=amd64 CGO_ENABLED=0 go build -o "/opt/incus/agent/incus-agent.linux.x86_64" -tags=agent,netgo github.com/lxc/incus/cmd/incus-agent
              GOARCH=386 CGO_ENABLED=0 go build -o "/opt/incus/agent/incus-agent.linux.i686" -tags=agent,netgo github.com/lxc/incus/cmd/incus-agent
          elif [ "$(uname -m)" = "aarch64" ]; then
              GOARCH=arm64 CGO_ENABLED=0 go build -o "/opt/incus/agent/incus-agent.linux.aarch64" -tags=agent,netgo github.com/lxc/incus/cmd/incus-agent
          fi

          make build-mo
          mkdir -p /opt/incus/share/locale
          cp po/*.mo /opt/incus/share/locale/

          make doc
          cp -R doc/html /opt/incus/doc

          mkdir -p /opt/incus/share/bash_completion.d/
          cp scripts/bash/incus /opt/incus/share/bash_completion.d/incus

      - name: Build UI (canonical)
        run: |
          REPO="${PWD}"

          cd /build/incus-ui-canonical

          # Specific tweaking
          git am "${REPO}/patches/ui-canonical-0001-Branding.patch"
          git am "${REPO}/patches/ui-canonical-0002-Update-navigation.patch"
          git am "${REPO}/patches/ui-canonical-0003-Update-certificate-generation.patch"
          git am "${REPO}/patches/ui-canonical-0004-Remove-external-links.patch"
          git am "${REPO}/patches/ui-canonical-0005-Remove-Canonical-image-servers.patch"
          git am "${REPO}/patches/ui-canonical-0006-Remove-version-check.patch"

          # Generic renaming
          sed -i "s/LXD/Incus/g" src/*/*.ts* src/*/*/*.ts* src/*/*/*/*.ts*
          sed -i "s/devlxd/guestapi/g" src/*/*.ts* src/*/*/*.ts* src/*/*/*/*.ts*
          sed -i "s/dev\/lxd/dev\/incus/g" src/*/*.ts* src/*/*/*.ts* src/*/*/*/*.ts*
          sed -i "s/lxd_/incus_/g" src/*/*.ts* src/*/*/*.ts* src/*/*/*/*.ts*
          sed -i "s/\"lxd\"/\"incus\"/g" src/*/*.ts* src/*/*/*.ts* src/*/*/*/*.ts*

          npm install yarn --global
          yarn install
          yarn build

          mkdir -p /opt/incus/ui-canonical/
          rsync -a /build/incus-ui-canonical/build/ui/ /opt/incus/ui-canonical/

      - name: Build CRIU
        run: |
          cd /build/criu
          make
          cp criu/criu /opt/incus/bin/

      - name: Build libnvidia-container
        run: |
          REPO="${PWD}"

          cd /build/libnvidia-container
          patch -p1 < "${REPO}/patches/nvidia-0001-Fix-for-22.04-build.patch"
          patch -p1 < "${REPO}/patches/nvidia-0002-pre-load-libdl.patch"
          make prefix=/

          mkdir /build/target/libnvidia-container
          DESTDIR=/build/target/libnvidia-container make install prefix=/
          rsync -a /build/target/libnvidia-container/bin/ /opt/incus/bin/
          rsync -a /build/target/libnvidia-container/include/ /opt/incus/include/
          rsync -a /build/target/libnvidia-container/lib/ /opt/incus/lib/

      - name: Build minio
        run: |
          cd /build/minio
          make build
          cp minio /opt/incus/bin/

      - name: Build seabios
        if: ${{ matrix.arch == 'amd64' }}
        run: |
          REPO="${PWD}"

          cd /build/seabios

          # Build a traditional seabios.
          make clean distclean
          echo "CONFIG_QEMU=y" >> .config
          echo "CONFIG_QEMU_HARDWARE=y" > .config
          echo "CONFIG_BOOTSPLASH=n" >> .config
          echo "CONFIG_ROM_SIZE=256" >> .config
          echo "CONFIG_XEN=n" >> .config
          echo "CONFIG_PVSCSI=n" >> .config
          echo "CONFIG_ESP_SCSI=n" >> .config
          echo "CONFIG_LSI_SCSI=n" >> .config
          echo "CONFIG_MEGASAS=n" >> .config
          echo "CONFIG_MPT_SCSI=n" >> .config
          echo "CONFIG_FLOPPY=n" >> .config
          echo "CONFIG_FLASH_FLOPPY=n" >> .config
          make oldnoconfig V=1
          make V=1 PYTHON=python3

          mkdir -p /opt/incus/share/qemu/
          cp out/bios.bin /opt/incus/share/qemu/seabios.bin

          # Build a CSM seabios.
          make clean distclean
          echo "CONFIG_QEMU_HARDWARE=y" > .config
          echo "CONFIG_CSM=y" >> .config
          echo "CONFIG_BOOTSPLASH=n" >> .config
          echo "CONFIG_ROM_SIZE=128" >> .config
          echo "CONFIG_PVSCSI=n" >> .config
          echo "CONFIG_ESP_SCSI=n" >> .config
          echo "CONFIG_LSI_SCSI=n" >> .config
          echo "CONFIG_MEGASAS=n" >> .config
          echo "CONFIG_MPT_SCSI=n" >> .config
          echo "CONFIG_FLOPPY=n" >> .config
          echo "CONFIG_FLASH_FLOPPY=n" >> .config
          make oldnoconfig V=1
          make V=1 PYTHON=python3

      - name: Build nasm
        run: |
          REPO="${PWD}"

          cd /build/nasm
          patch -p1 < "${REPO}/patches/nasm-0000-disable-manpages.patch"
          patch -p1 < "${REPO}/patches/nasm-0001-old-autoconf.patch"
          ./autogen.sh
          ./configure --prefix=/opt/incus
          make

          mkdir -p /build/target/nasm/
          DESTDIR=/build/target/nasm make install
          rsync -a /build/target/nasm/opt/incus/bin/ /opt/incus/bin/

      - name: Build EDK2
        run: |
          REPO="${PWD}"

          cd /build/edk2
          patch -p1 < "${REPO}/patches/edk2-0001-force-DUID-LLT.patch"
          cp "${REPO}/patches/edk2-0002-logo.bmp" MdeModulePkg/Logo/Logo.bmp
          patch -p1 < "${REPO}/patches/edk2-0003-boot-delay.patch"
          patch -p1 < "${REPO}/patches/edk2-0004-gcc-errors.patch"
          patch -p1 < "${REPO}/patches/edk2-0005-Revert-ArmVirtPkg-make-EFI_LOADER_DATA-non-executabl.patch"
          patch -p1 < "${REPO}/patches/edk2-0006-disable-EFI-memory-attributes-protocol.patch"
          patch -p1 < "${REPO}/patches/edk2-0007-disable-UEFI-shell-under-SecureBoot.patch"

          if [ "$(uname -m)" = "x86_64" ]; then
              cp ../seabios/out/Csm16.bin OvmfPkg/Csm/Csm16/Csm16.bin
          fi

          EDK2_ARCH="X64"
          EDK2_PKG="OvmfPkg/OvmfPkgX64.dsc"
          EDK2_FV_CODE="OVMF_CODE"
          EDK2_FV_VARS="OVMF_VARS"
          if [ "$(uname -m)" = "aarch64" ]; then
              EDK2_ARCH="AARCH64"
              EDK2_PKG="ArmVirtPkg/ArmVirtQemu.dsc"
              EDK2_FV_CODE="QEMU_EFI"
              EDK2_FV_VARS="QEMU_VARS"
          fi

          build_edk2() {
              TARGET_CODE="$1"
              shift
              TARGET_VARS="$1"
              shift

              set -ex
              (
              cat << EOF
                  . ./edksetup.sh
                  make -C BaseTools ARCH=${EDK2_ARCH}
                  build -a ${EDK2_ARCH} -t GCC5 -b RELEASE -p ${EDK2_PKG} \
                    -DSMM_REQUIRE=FALSE \
                    -DSECURE_BOOT_ENABLE=TRUE \
                    -DNETWORK_IP4_ENABLE=TRUE \
                    -DNETWORK_IP6_ENABLE=TRUE \
                    -DNETWORK_TLS_ENABLE=TRUE \
                    -DNETWORK_HTTP_BOOT_ENABLE=TRUE \
                    -DTPM2_ENABLE=TRUE \
                    -DTPM2_CONFIG_ENABLE=TRUE \
                    $@
          EOF
              ) | bash -e

              cp Build/*/*/FV/${EDK2_FV_CODE}.fd "${TARGET_CODE}"
              cp Build/*/*/FV/${EDK2_FV_VARS}.fd "${TARGET_VARS}"

              if [ "$(uname -m)" = "aarch64" ]; then
                  truncate -s 64m "${TARGET_CODE}"
                  truncate -s 64m "${TARGET_VARS}"
              fi
          }

          mkdir -p "/opt/incus/share/qemu/"
          build_edk2 \
            "/opt/incus/share/qemu/OVMF_CODE.4MB.fd" \
            "/opt/incus/share/qemu/OVMF_VARS.4MB.fd" \
            -DFD_SIZE_4MB

          if [ "$(uname -m)" = "x86_64" ]; then
              build_edk2 \
                "/opt/incus/share/qemu/OVMF_CODE.4MB.CSM.fd" \
                "/opt/incus/share/qemu/OVMF_VARS.4MB.CSM.fd" \
                -DFD_SIZE_4MB \
                -DCSM_ENABLE=TRUE
          fi

          ln -s OVMF_CODE.4MB.fd /opt/incus/share/qemu/OVMF_CODE.fd
          ln -s OVMF_VARS.4MB.fd /opt/incus/share/qemu/OVMF_VARS.fd

      - name: Build libtmps
        run: |
          cd /build/libtpms
          ./autogen.sh
          ./configure --prefix=/opt/incus --with-tpm2 --with-openssl
          make

          mkdir -p /build/target/libtpms/
          DESTDIR=/build/target/libtpms make install
          rsync -a /build/target/libtpms/opt/incus/include/ /opt/incus/include/
          rsync -a /build/target/libtpms/opt/incus/lib/ /opt/incus/lib/

      - name: Build swtpm
        run: |
          cd /build/swtpm
          ./autogen.sh
          ./configure --prefix=/opt/incus --with-seccomp --with-openssl --without-cuse
          make

          mkdir -p /build/target/swtpm/
          DESTDIR=/build/target/swtpm make install
          rsync -a /build/target/swtpm/opt/incus/bin/ /opt/incus/bin/
          rsync -a /build/target/swtpm/opt/incus/include/ /opt/incus/include/
          rsync -a /build/target/swtpm/opt/incus/lib/ /opt/incus/lib/

      - name: Build virtiofsd
        run: |
          cd /build/virtiofsd
          cargo build --release
          cp target/release/virtiofsd /opt/incus/bin/

      - name: Build QEMU
        run: |
          cd /build/qemu
          sed -i "s/^unset target_list$/target_list=\"$(uname -m)-softmmu\"/" configure
          sed -i 's#libseccomp_minver=".*#libseccomp_minver="0.0"#g' configure
          ./configure \
                  --prefix=/opt/incus \
                  --libexecdir=bin \
                  --libdir=lib \
                  --disable-bochs \
                  --disable-cloop \
                  --disable-dmg \
                  --disable-docs  \
                  --disable-guest-agent \
                  --disable-parallels \
                  --disable-qed \
                  --disable-slirp \
                  --disable-user \
                  --disable-vdi \
                  --disable-vnc \
                  --disable-xen \
                  --disable-install-blobs \
                  --enable-attr \
                  --enable-cap-ng \
                  --enable-kvm \
                  --enable-libusb \
                  --enable-usb-redir \
                  --enable-linux-aio \
                  --enable-linux-io-uring \
                  --enable-numa \
                  --enable-pie \
                  --enable-rbd \
                  --enable-seccomp \
                  --enable-spice \
                  --enable-system \
                  --enable-tcg \
                  --enable-tools \
                  --enable-vhost-crypto \
                  --enable-vhost-kernel \
                  --enable-vhost-net \
                  --enable-vhost-user \
                  --enable-virtfs
          make

          mkdir /build/target/qemu/
          DESTDIR=/build/target/qemu/ make install
          rsync -a /build/target/qemu/opt/incus/bin/ /opt/incus/bin/
          rsync -a /build/target/qemu/opt/incus/lib/ /opt/incus/lib/
          rsync -a /build/target/qemu/opt/incus/share/qemu/ /opt/incus/share/qemu/
          cp /build/qemu/pc-bios/kvmvapic.bin /opt/incus/share/qemu/
          cp /build/qemu/pc-bios/vgabios-qxl.bin /opt/incus/share/qemu/
          cp /build/qemu/pc-bios/vgabios-virtio.bin /opt/incus/share/qemu/
          cp /build/qemu/pc-bios/efi-virtio.rom /opt/incus/share/qemu/

      - name: Build Secure Boot firmware
        run: |
          REPO="${PWD}"

          cd /build/edk2

          FIRMWARE="OVMF"
          if [ "$(uname -m)" = "aarch64" ]; then
            FIRMWARE="AAVMF"
          fi

          cd "${REPO}/edk2-vars-generator"
          ./edk2-vars-generator -f "${FIRMWARE}" \
            -e /build/edk2/Build/*/*/*/EnrollDefaultKeys.efi \
            -s /build/edk2/Build/*/*/*/Shell.efi \
            -c "/opt/incus/share/qemu/OVMF_CODE.4MB.fd" \
            -V "/opt/incus/share/qemu/OVMF_VARS.4MB.fd" \
            -C "$(cat ${REPO}/zabbly-sb.oem.crt)" \
            -o "/opt/incus/share/qemu/OVMF_VARS.4MB.ms.fd"

      - name: Systemd units
        run: |
          cp systemd/*.service systemd/*.socket /opt/incus/lib/systemd/system/
          cp systemd/incusd /opt/incus/lib/systemd/
          cp systemd/incus-startup /opt/incus/lib/systemd/
          cp systemd/incus-user /opt/incus/lib/systemd/

      - name: Strip and cleanup binaries
        run: |
          rm -Rf /opt/incus/lib/debug/
          rm -Rf /opt/incus/include/
          rm -Rf /opt/incus/lib/pkgconfig/
          rm /opt/incus/lib/*.a /opt/incus/lib/*.la /opt/incus/lib/*/*.a /opt/incus/lib/*/*.la

          rm /opt/incus/bin/nasm
          rm /opt/incus/bin/ndisasm
          rm /opt/incus/bin/qemu-bridge-helper
          rm /opt/incus/bin/qemu-edid
          rm /opt/incus/bin/qemu-io
          rm /opt/incus/bin/qemu-nbd
          rm /opt/incus/bin/qemu-pr-helper
          rm /opt/incus/bin/qemu-storage-daemon
          rm /opt/incus/bin/swtpm_*
          rm /opt/incus/share/qemu/trace-events-all

          strip /opt/incus/bin/*
          strip /opt/incus/lib/*so*

      - name: Make a Debian package
        env:
          PKGOS: ${{ matrix.os }}
        run: |
          [ "${PKGOS}" = "debian-11" ] && CODENAME=bullseye
          [ "${PKGOS}" = "debian-12" ] && CODENAME=bookworm
          [ "${PKGOS}" = "ubuntu-20.04" ] && CODENAME=focal
          [ "${PKGOS}" = "ubuntu-22.04" ] && CODENAME=jammy

          mkdir -p pkg/ pkg/lib/systemd/system/ pkg/opt/ pkg/usr/bin/ pkg/usr/share/bash-completion/completions/

          cp -R debian pkg/debian
          cp bin/* pkg/usr/bin/
          cp -R /opt/incus pkg/opt/
          cp -R etc pkg/etc
          ln -s ../../../opt/incus/lib/systemd/system/incus.service pkg/lib/systemd/system/incus.service
          ln -s ../../../opt/incus/lib/systemd/system/incus.socket pkg/lib/systemd/system/incus.socket
          ln -s ../../../opt/incus/lib/systemd/system/incus-startup.service pkg/lib/systemd/system/incus-startup.service
          ln -s ../../../opt/incus/lib/systemd/system/incus-user.service pkg/lib/systemd/system/incus-user.service
          ln -s ../../../opt/incus/lib/systemd/system/incus-user.socket pkg/lib/systemd/system/incus-user.socket
          ln -s ../../../opt/incus/lib/systemd/system/incus-lxcfs.service pkg/lib/systemd/system/incus-lxcfs.service
          ln -s /opt/incus/share/bash_completion.d/incus pkg/usr/share/bash-completion/completions/incus
          ln -s /opt/incus/bin/incus pkg/usr/bin/incus
          ln -s /opt/incus/bin/lxd-to-incus pkg/usr/bin/lxd-to-incus

          mkdir -p pkg/var/lib/incus
          chmod 711 pkg/var/lib/incus

          mkdir -p pkg/var/log/incus
          chmod 700 pkg/var/log/incus

          mkdir -p pkg/usr/share/locale
          for i in /opt/incus/share/locale/*.mo; do
            LANG=$(echo $i | sed -e "s#.*/locale/##g" -e "s#.mo\$##g")
            mkdir -p pkg/usr/share/locale/${LANG}/LC_MESSAGES
            ln -s ${i} pkg/usr/share/locale/${LANG}/LC_MESSAGES/incus.mo
          done

          cd pkg
          dch --package incus --create -D ${CODENAME} -M -m "Automated Incus stable build" -v $(echo ${INCUS_TAG} | sed -e "s/v//" -e "s/.0$//")-$(date -u +%Y%m%d%H%M)-$(echo ${PKGOS} | sed "s/-//g") --force-distribution
          dpkg-buildpackage -b

          cd ..
          mkdir out
          mv incus_* out/
          mv incus-base_* out/
          mv incus-client_* out/
          mv incus-ui-canonical_* out/

      - name: Upload resulting build
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: out/*
